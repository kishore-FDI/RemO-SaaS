generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String          @id @default(uuid())
  name               String
  email              String          @unique
  userBlog           Json?
  createdAt          DateTime        @default(now())
  companiesOwned     Company[]       @relation("CompanyOwner")
  companyMemberships CompanyMember[]
  projectMemberships ProjectMember[]
}

model Company {
  id         String          @id @default(uuid())
  name       String          @unique
  ownerId    String
  createdAt  DateTime        @default(now())
  inviteCode String          @unique @default(nanoid(30))
  owner      User            @relation("CompanyOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members    CompanyMember[]
  projects   Project[]
}

model CompanyMember {
  id        String      @id @default(uuid())
  userId    String
  companyId String
  role      CompanyRole @default(MEMBER)
  company   Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id])

  @@unique([userId, companyId])
}

model Project {
  id          String          @id @default(uuid())
  title       String
  description String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  companyId   String
  projectBlog Json?
  link        String?         @unique @default(nanoid(20))
  company     Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  members     ProjectMember[]
  tasks       Task[]
}

model ProjectMember {
  id        String      @id @default(uuid())
  projectId String
  userId    String
  role      ProjectRole @default(MEMBER)
  project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id])
  tasks     Task[]      @relation("ProjectMemberTasks")

  @@unique([projectId, userId])
}

model Task {
  id          String         @id @default(uuid())
  title       String
  description String?
  completed   Boolean        @default(false)
  dueDate     DateTime?
  assignedTo  String?
  projectId   String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  archived    Boolean        @default(false)
  assignee    ProjectMember? @relation("ProjectMemberTasks", fields: [assignedTo], references: [id])
  project     Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

enum CompanyRole {
  OWNER
  ADMIN
  MEMBER
}

enum ProjectRole {
  OWNER
  ADMIN
  MEMBER
}
